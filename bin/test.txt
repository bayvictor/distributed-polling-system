div_group_adwords.py-from decimal import Decimal  
div_group_adwords.py-import sys
div_group_adwords.py-import re
div_group_adwords.py-import os
div_group_adwords.py:import optparse
div_group_adwords.py-import time
div_group_adwords.py-
div_group_adwords.py-TOTALSIZE = 0
div_group_adwords.py-CURSIZE = 0
div_group_adwords.py-STARTTIME = 0
--
div_group_adwords.py-
div_group_adwords.py-#####################################
div_group_adwords.py-if __name__ == '__main__':
div_group_adwords.py-    usage = "usage: %prog filename"
div_group_adwords.py:    p = optparse.OptionParser(usage=usage)
div_group_adwords.py-    p.add_option("-s", "--striponly", action="store_true", default=False, help="Only strip parsed files, no need to parse xml")
div_group_adwords.py-    
div_group_adwords.py-    (opts, args) = p.parse_args()
div_group_adwords.py-    if not len(args) == 1:
div_group_adwords.py-        print usage
--
googim.py-#!/usr/bin/python
googim.py-
googim.py:import urllib, urllib2, re, os, optparse, socket,sys
googim.py-
googim.py-socket.setdefaulttimeout( 5 )
googim.py-
googim.py:opts = optparse.OptionParser( usage="Usage: gimg.py [options] <search_terms>" )
googim.py-opts.add_option( "-s", "--safe", dest="safesearch", default=False,
googim.py-    help="Enable Google's SafeSearch", action="store_true" )
googim.py-opts.add_option( "-c", "--count", dest="targetcount", default=20,
googim.py-    help="Download NUM images", metavar="NUM", type="int" )
googim.py-opts.add_option( "-r", "--resumecount", dest="resumecount", default=0,
--
html2text.py-try: #Python3
html2text.py-    import urllib.request as urllib
html2text.py-except:
html2text.py-    import urllib
html2text.py:import optparse, re, sys, codecs, types
html2text.py-
html2text.py-try: from textwrap import wrap
html2text.py-except: pass
html2text.py-
html2text.py-# Use Unicode characters instead of their ascii psuedo-replacements
--
html2text.py-
html2text.py-def main():
html2text.py-    baseurl = ''
html2text.py-
html2text.py:    p = optparse.OptionParser('%prog [(filename|url) [encoding]]',
html2text.py-                              version='%prog ' + __version__)
html2text.py-    p.add_option("--ignore-emphasis", dest="ignore_emphasis", action="store_true",
html2text.py-        default=IGNORE_EMPHASIS, help="don't include any formatting for emphasis")
html2text.py-    p.add_option("--ignore-links", dest="ignore_links", action="store_true",
html2text.py-        default=IGNORE_ANCHORS, help="don't include any formatting for links")
--
wordlist_googim.py-#!/usr/bin/python
wordlist_googim.py-
wordlist_googim.py:import urllib, urllib2, re, os, optparse, socket,sys
wordlist_googim.py-
wordlist_googim.py-socket.setdefaulttimeout( 5 )
wordlist_googim.py-
wordlist_googim.py:opts = optparse.OptionParser( usage="Usage: gimg.py [options] <search_terms>" )
wordlist_googim.py-opts.add_option( "-s", "--safe", dest="safesearch", default=False,
wordlist_googim.py-    help="Enable Google's SafeSearch", action="store_true" )
wordlist_googim.py-opts.add_option( "-c", "--count", dest="targetcount", default=20,
wordlist_googim.py-    help="Download NUM images", metavar="NUM", type="int" )
wordlist_googim.py-opts.add_option( "-r", "--resumecount", dest="resumecount", default=0,
--
wordlist_googsrc.py-#!/usr/bin/python
wordlist_googsrc.py-
wordlist_googsrc.py:import urllib, urllib2, re, os, optparse, socket,sys
wordlist_googsrc.py-re_ftag = re.compile(r'(/?)([^\s]+)(.*)', re.I|re.M|re.S)
wordlist_googsrc.py-re_href = re.compile(r'(href|src)\s*=\s*["\']([^"\']+)["\']', re.I|re.M|re.S)
wordlist_googsrc.py-re_href_orig = re.compile(r"""(<span class=tl><h3 class="r"><a href="(.*)|src)\s*=\s*["\']([^"\']+)["\']""") #, re.I|re.M|re.S)
wordlist_googsrc.py-#re_href_orig = re.compile(r'(<span class=tl><h3 class=\"r\"><a href|src)\s*=\s*["\']([^"\']+)["\']', re.I|re.M|re.S)
wordlist_googsrc.py-#<span class=tl><h3 class="r"><a href=
--
wordlist_googsrc.py-re_comments = re.compile(r'<!--.*?-->', re.I|re.M|re.S)
wordlist_googsrc.py-
wordlist_googsrc.py-socket.setdefaulttimeout( 5 )
wordlist_googsrc.py-
wordlist_googsrc.py:opts = optparse.OptionParser( usage="Usage: gimg.py [options] <search_terms>" )
wordlist_googsrc.py-opts.add_option( "-s", "--safe", dest="safesearch", default=False,
wordlist_googsrc.py-    help="Enable Google's SafeSearch", action="store_true" )
wordlist_googsrc.py-opts.add_option( "-i", "--infile", dest="infile", default="wordlist.txt",
wordlist_googsrc.py-    help="input wordlist for looking in Google's WebSearch",  metavar="INFILE", type="str" )
wordlist_googsrc.py-opts.add_option( "-c", "--count", dest="targetcount", default=20,
