#!/usr/bin/env python
from multiprocessing import Pool
import os
import sys
import socket
from subprocess import Popen


def do_link( link, dns2ip_dict ): #victor, hxd, build index, saving to disk, 
#      dns2ip_dict = all_dict["dns2ip_dict"]
      bare_start = link.find("://")
      if -1 == bare_start:
        dns_end = link.find('/')
        bare_start = 0
      else:
        bare_start += 3

      dns_end = link[bare_start:].find('/')
      if -1 != dns_end:
        host = link[bare_start:bare_start+dns_end]
        if host in  dns2ip_dict:
          ip = dns2ip_dict[host]
          print ("pick cached ip {} for host=({})!".format(ip,host))
        else: # update ip with new request...
          try:
            ip = socket.gethostbyname(host)
            print("{} resolves to {}".format(host, ip))
          except socket.gaierror:
            print("Could not resolve ip for ({})!".format(host))
            ip = None; dns2ip_url="";local_fn="";
            return host, ip, dns2ip_url, local_fn
#            exit(1) # put here for debugging purpose, so any wrong parsing of dns will exit!
          dns2ip_dict[host]=ip  
      dns2ip_url = link.replace( host, ip )
      local_fn = ''.join( ch if ch.isalnum() else '_' for ch in link )
      return host, ip, dns2ip_url, local_fn


def get_neat_lines(cmd_filename):
  try:
    fin=open( cmd_filename, "r")
  except:
    print ("command filename=("+url_down_fn+") not found!")
    sys.exit(1)

  lines0 = fin.readlines()
  fin.close();
  lines = [ ss.strip() for ss in lines0 ]
  print ("len(lines)={}".format(len(lines)) )
  return(lines)

def do_para_block_for_lines( lines, worker_num, data ):
  pool_num = int (worker_num)
  pool = Pool( processes = pool_num )              # start 4 worker processes

  block_start_ii = 0	
  dns2ip_dict = {}
  for ii in range( len(lines) ):
    blocklist=[]
    for jj in range (0, pool_num):
     try:
      print ("block_start_ii={},jj={}".format(block_start_ii,jj) )
      words = lines[block_start_ii+jj].split(' ')
      host, ip, dns2ip_url, local_fn = 	do_link( words[0], dns2ip_dict )
      dns2ip_dict [host] = ip
      print ("host=({}),ip=({}),dns2ip_url=({}),local_fn=({})".format( host, ip, dns2ip_url,local_fn ) )
      blocklist.append( "echo " + lines[ block_start_ii + jj ] )
    except:
      print ("at the end of file or other except error! clearing up...at line_num=({}".format(block_start_ii + jj) )
      for key in dns2ip_dict:
        data.replace ( key , dns2ip[key] )
      return


    # run in parallel
    processes = [Popen(cmd, shell=True) for cmd in blocklist]
    # do other things here..
    # wait for completion
    for p in processes: p.wait()
    block_start_ii += pool_num	
    if  block_start_ii >= len(lines): 
	break
    print ("next shell id start from ({})",format(block_start_ii) )

  for key in dns2ip_dict:
    data.replace ( key , dns2ip[key] )


if __name__ == '__main__':

  if len(sys.argv) < 4:
    print ("len(sys.argv)=({})".format (len(sys.argv)) )
    print ("usage: {} <url_filename> <workernum> <target_replacing_dns2ip_fn>".format(sys.argv[0]) )
    print ("usage: {}  dns2ip_proxies.txt  10 proxy02.txt".format(sys.argv[0]) )
    print ("output will be in .out".format(sys.argv[0]) )
    exit(1)		

  cmd_filename = sys.argv[1]
  worker_num   = sys.argv[2]
  dns_fn   = sys.argv[3]

  url_lines =  get_neat_lines(cmd_filename);

  try:
    fin=open( cmd_filename, "r")
    fout=open( cmd_filename+".out", "w")
    data = fin.read()
  except:
    print ("command filename=("+url_down_fn+") not found!")
    sys.exit(1)

 
  do_para_block_for_lines( url_lines, worker_num, data ) ## finishing all dns2ip mapping
  fout.write( data )
  fout.close()




