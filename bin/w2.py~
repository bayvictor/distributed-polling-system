##!/usr/bin/env python
import os,sys
import math

"""
#!/usr/bin/env python
#-*- coding: utf-8 -*-
"""


"""def split_with_nonalnum(line):
  new_line=''
  words=[]
  start_ii = 0
  end_ii = 0
  llen = len(line)
  for ii in range(0, llen ):
    if False == line[ii].isalnum():
      seg = line[start_ii:end_ii]
      print "seg=("+seg+")"
      words.append( seg )
      start_ii = end_ii+1
      new_line +=' '
    else:
      new_line += line[ii]

  if end_ii >= llen:
    words.append(line[start_ii:llen])

  return words, new_line 
"""
def ngram( words, nn, dict_out, algorithm ): # so far algorithm is 1.compress-rate first; 2. accuracy-first
  ## we should build a rule mapping here, instead of the program; make rules into data! so call knowledge base!
  wordlen_list=['1','2','3','4','5','6','7','8','9','10','11-16','16-23','23-128','128-256'] ## making the micro rule in a string, make it parsable , can be hierarchical

  ## tridex: syntax:<prioirty:depth>, here: 1=<left-first>, 0=<right-first>; 
  tridex_rule=[':',':','1:1']
  word_ind_rules=['::','1::','1::','1:2:','1:2:','1:2:3']
  if (len(words)) < nn :
    return  ## dimension of array too small then target gram
  wn = "w"+str(nn)
  wlen = len( words )
  
def w2c3c3_add_dict( words, mm, nn, dict_out ): ## to be tested  
  wordmm = words[mm]
  wordnn = words[nn]
  len_mm = len(wordmm)
  len_nn = len(wordnn)
  for ii in range(0, len_mm):
    Lch3 = wordmm[ii:ii+3]
    for jj in range(0, len_nn):
      dist = jj - ii
      Rch3 = wordnn[jj:jj+3]
      val01 =  math.ceil(math.log ((dist & 0x3f) +1, 2)) << 10 
      val01 += math.ceil(math.log((ii&0x3f) + 1 , 2)) << 5 + math.ceil(math.log((jj&0x3f) +1, 2 )) ##<< 10 
      val02 = math.ceil(math.log((mm&0x3f)+1, 2 )) << 5 + math.ceil(math.log((nn&0x3f)+1, 2 ))  
      print ("val01=("+str(val01)+"),chr("+chr(val01)+")")
      print ("val02=("+str(val02)+"),chr("+chr(val02)+")")
##      w2ch3ch3 = Lch3 + Rch3 + unichr(val)   ##for python2.x
      w2ch3ch3 = Lch3 + Rch3 + chr(val01) +chr(val02)       ##for python3.x
      if not w2ch3ch3 in dict_out["w2ch3ch3"]:
          print (w2ch3ch3)
          dict_out["w2ch3ch3"][w2ch3ch3] = 1
      else:
          dict_out["w2ch3ch3"][w2ch3ch3] += 1  


def parse_file(fn):
  stopwords0=['a', "a's", 'able', 'about', 'above', 'according', 'accordingly', 'across', 'actually', 'after', 'afterwards', 'again', 'against', "ain't", 'all', 'allow', 'allows', 'almost', 'alone', 'along', 'already', 'also', 'although', 'always', 'am', 'among', 'amongst', 'an', 'and', 'another', 'any', 'anybody', 'anyhow', 'anyone', 'anything', 'anyway', 'anyways', 'anywhere', 'apart', 'appear', 'appreciate', 'appropriate', 'are', "aren't", 'around', 'as', 'aside', 'ask', 'asking', 'associated', 'at', 'available', 'away', 'awfully', 'b', 'be', 'became', 'because', 'become', 'becomes', 'becoming', 'been', 'before', 'beforehand', 'behind', 'being', 'believe', 'below', 'beside', 'besides', 'best', 'better', 'between', 'beyond', 'both', 'brief', 'but', 'by', 'c', "c'mon", "c's", 'came', 'can', "can't", 'cannot', 'cant', 'cause', 'causes', 'certain', 'certainly', 'changes', 'clearly', 'co', 'com', 'come', 'comes', 'concerning', 'consequently', 'consider', 'considering', 'contain', 'containing', 'contains', 'corresponding', 'could', "couldn't", 'course', 'currently', 'd', 'definitely', 'described', 'despite', 'did', "didn't", 'different', 'do', 'does', "doesn't", 'doing', "don't", 'done', 'down', 'downwards', 'during', 'e', 'each', 'edu', 'eg', 'eight', 'either', 'else', 'elsewhere', 'enough', 'entirely', 'especially', 'et', 'etc', 'even', 'ever', 'every', 'everybody', 'everyone', 'everything', 'everywhere', 'ex', 'exactly', 'example', 'except', 'f', 'far', 'few', 'fifth', 'first', 'five', 'followed', 'following', 'follows', 'for', 'former', 'formerly', 'forth', 'four', 'from', 'further', 'furthermore', 'g', 'get', 'gets', 'getting', 'given', 'gives', 'go', 'goes', 'going', 'gone', 'got', 'gotten', 'greetings', 'h', 'had', "hadn't", 'happens', 'hardly', 'has', "hasn't", 'have', "haven't", 'having', 'he', "he's", 'hello', 'help', 'hence', 'her', 'here', "here's", 'hereafter', 'hereby', 'herein', 'hereupon', 'hers', 'herself', 'hi', 'him', 'himself', 'his', 'hither', 'hopefully', 'how', 'howbeit', 'however', 'i', "i'd", "i'll", "i'm", "i've", 'ie', 'if', 'ignored', 'immediate', 'in', 'inasmuch', 'inc', 'indeed', 'indicate', 'indicated', 'indicates', 'inner', 'insofar', 'instead', 'into', 'inward', 'is', "isn't", 'it', "it'd", "it'll", "it's", 'its', 'itself', 'j', 'just', 'k', 'keep', 'keeps', 'kept', 'know', 'knows', 'known', 'l', 'last', 'lately', 'later', 'latter', 'latterly', 'least', 'less', 'lest', 'let', "let's", 'like', 'liked', 'likely', 'little', 'look', 'looking', 'looks', 'ltd', 'm', 'mainly', 'many', 'may', 'maybe', 'me', 'mean', 'meanwhile', 'merely', 'might', 'more', 'moreover', 'most', 'mostly', 'much', 'must', 'my', 'myself', 'n', 'name', 'namely', 'nd', 'near', 'nearly', 'necessary', 'need', 'needs', 'neither', 'never', 'nevertheless', 'new', 'next', 'nine', 'no', 'nobody', 'non', 'none', 'noone', 'nor', 'normally', 'not', 'nothing', 'novel', 'now', 'nowhere', 'o', 'obviously', 'of', 'off', 'often', 'oh', 'ok', 'okay', 'old', 'on', 'once', 'one', 'ones', 'only', 'onto', 'or', 'other', 'others', 'otherwise', 'ought', 'our', 'ours', 'ourselves', 'out', 'outside', 'over', 'overall', 'own', 'p', 'particular', 'particularly', 'per', 'perhaps', 'placed', 'please', 'plus', 'possible', 'presumably', 'probably', 'provides', 'q', 'que', 'quite', 'qv', 'r', 'rather', 'rd', 're', 'really', 'reasonably', 'regarding', 'regardless', 'regards', 'relatively', 'respectively', 'right', 's', 'said', 'same', 'saw', 'say', 'saying', 'says', 'second', 'secondly', 'see', 'seeing', 'seem', 'seemed', 'seeming', 'seems', 'seen', 'self', 'selves', 'sensible', 'sent', 'serious', 'seriously', 'seven', 'several', 'shall', 'she', 'should', "shouldn't", 'since', 'six', 'so', 'some', 'somebody', 'somehow', 'someone', 'something', 'sometime', 'sometimes', 'somewhat', 'somewhere', 'soon', 'sorry', 'specified', 'specify', 'specifying', 'still', 'sub', 'such', 'sup', 'sure', 't', "t's", 'take', 'taken', 'tell', 'tends', 'th', 'than', 'thank', 'thanks', 'thanx', 'that', "that's", 'thats', 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'thence', 'there', "there's", 'thereafter', 'thereby', 'therefore', 'therein', 'theres', 'thereupon', 'these', 'they', "they'd", "they'll", "they're", "they've", 'think', 'third', 'this', 'thorough', 'thoroughly', 'those', 'though', 'three', 'through', 'throughout', 'thru', 'thus', 'to', 'together', 'too', 'took', 'toward', 'towards', 'tried', 'tries', 'truly', 'try', 'trying', 'twice', 'two', 'u', 'un', 'under', 'unfortunately', 'unless', 'unlikely', 'until', 'unto', 'up', 'upon', 'us', 'use', 'used', 'useful', 'uses', 'using', 'usually', 'uucp', 'v', 'value', 'various', 'very', 'via', 'viz', 'vs', 'w', 'want', 'wants', 'was', "wasn't", 'way', 'we', "we'd", "we'll", "we're", "we've", 'welcome', 'well', 'went', 'were', "weren't", 'what', "what's", 'whatever', 'when', 'whence', 'whenever', 'where', "where's", 'whereafter', 'whereas', 'whereby', 'wherein', 'whereupon', 'wherever', 'whether', 'which', 'while', 'whither', 'who', "who's", 'whoever', 'whole', 'whom', 'whose', 'why', 'will', 'willing', 'wish', 'with', 'within', 'without', "won't", 'wonder', 'would', 'would', "wouldn't", 'x', 'y', 'yes', 'yet', 'you', "you'd", "you'll", "you're", "you've", 'your', 'yours', 'yourself', 'yourselves', 'z', 'zero']
  
  dict_out = {};
  dict_out["w1"]={};    dict_out["w2"]={};  dict_out["w2ch3ch3"]={};  dict_out["w3"]={};  
  cmd4 ="  cat "+ fn + "| tr ' ' '\n'"
  p4 = os.popen( cmd4 )
  lines = p4.readlines()
  fn_out =  fn+".fq2w2.txt"
  fout=open( fn_out, "w")
  w2fn_out =  fn+".w2.txt"
  w2fout=open( w2fn_out, "w")

  w2ch3ch3fn_out =  fn+".w2ch3ch3.txt"
  w2ch3ch3fout=open( w2ch3ch3fn_out, "w") # w2ch3ch3


  total_lines = len(lines)
  for ii in range(0, len(lines)):
    print ("line["+str(ii)+"]=("+lines[ii]+")")
    line = lines[ii]
    new_line = ''.join( ch if ch.isalnum() else ' ' for ch in line )  #repl all [^0-9a-zA-Z] with ' '
    new_line = new_line.lower()
    words = new_line.split()
    for jj in range (0, len(words)):
      if len(words) <= 0:
        continue
      w1 = words[jj]
      if w1 in stopwords0:
        continue 
      if not w1 in dict_out["w1"]:
        dict_out["w1"][w1] = 1
      else:
        dict_out["w1"][w1] += 1

      for mm in range(jj+1, len(words)): # subloop in jj looping
        w2 = words[jj]+"+"+words[mm]
        if words[mm] in stopwords0:
          continue
        distant = mm - jj
        w2c3c3_add_dict( words, jj, mm, dict_out ) ## to be tested  
        if not w2 in dict_out["w2"]:
          print (w2)
          dict_out["w2"][w2] = 1
        else:
          dict_out["w2"][w2] += 1

  for w1 in dict_out["w1"]: 
    fout.write(str(dict_out["w1"][w1])+":"+w1+"\n")  
   
  fout.close()
  
  for w2 in  dict_out["w2"]:
    w2fout.write(str(dict_out["w2"][w2])+":"+w2+"\n")  

  w2fout.close()

  for w2ch3ch3 in  dict_out["w2ch3ch3"]:
    w2ch3ch3fout.write(str(dict_out["w2ch3ch3"][w2ch3ch3])+":"+w2ch3ch3+"\n")  

  w2ch3ch3fout.close() ## w2


  os.popen("sort "+ fn_out +" -g -k 1 -r >"+fn_out+".srt")
  os.popen("sort "+ w2fn_out +" -g -k 1 -r >"+w2fn_out+".srt")
  os.popen("sort "+ w2ch3ch3fn_out +" -g -k 1 -r >"+w2ch3ch3fn_out+".srt")
  os.popen("rm -fr "+ fn_out )
  os.popen("rm -fr "+ w2fn_out )
  os.popen("rm -fr "+ w2ch3ch3fn_out )

#   write_parsed_link:


if __name__=="__main__":

  if len(sys.argv) < 2: 
    print ("Format: "+sys.argv[0]+ " <fn_split>")
    print ("e.g.: 	"+sys.argv[0]+ " newcsv.txt.bare ")
    sys.exit(1)

  parse_file(sys.argv[1])    

